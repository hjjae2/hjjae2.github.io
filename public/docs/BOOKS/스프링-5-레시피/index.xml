<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>스프링 5 레시피 on thisandthat</title>
    <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-5-%EB%A0%88%EC%8B%9C%ED%94%BC/</link>
    <description>Recent content in 스프링 5 레시피 on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-5-%EB%A0%88%EC%8B%9C%ED%94%BC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. 스프링 코어</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-5-%EB%A0%88%EC%8B%9C%ED%94%BC/1%EC%9E%A5.%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BD%94%EC%96%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-5-%EB%A0%88%EC%8B%9C%ED%94%BC/1%EC%9E%A5.%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BD%94%EC%96%B4/</guid>
      <description>스프링 코어 # 아래 클래스는 스프링 IoC 컨테이너 (이하 IoC 컨테이너) 가 스캐닝한다.
자바 구성 클래스 (Java Configuration Class)
@Configuration @Bean 자바 컴포넌트 클래스 (Java Component Class)
@Component @Controller @Service @Repository @Configuration public class SequenceGeneratorConfiguration { @Bean public SequenceGenerator sequenceGenerator() { SequenceGenerator seqGen = new SequenceGenerator(); ... return seqGen } } 스프링은 @Configuration 의 클래스를 스캐닝하면, 그 안에서 (Bean 인스턴스를 생성해 반환하는) @Bean 자바 메소드를 찾는다.
기본적으로 Bean 의 이름은 메소드 명을 따라간다.</description>
    </item>
    
    <item>
      <title>02. 스프링 MVC</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-5-%EB%A0%88%EC%8B%9C%ED%94%BC/2%EC%9E%A5.-%EC%8A%A4%ED%94%84%EB%A7%81-MVC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-5-%EB%A0%88%EC%8B%9C%ED%94%BC/2%EC%9E%A5.-%EC%8A%A4%ED%94%84%EB%A7%81-MVC/</guid>
      <description>스프링 MVC # MVC 는 아주 일반적인 UI 디자인 패턴이다.
Model, View, Controller 의 역할을 분리한다. (* UI 에서 비즈니스 로직을 분리시킬 수 있다.)
Model : Data 에만 집중한다. View : Model(Data)를 보여주는 것에만 집중한다. (렌더링에 집중한다.) Controller : 요청을 받고, 비즈니스 로직을 수행을 위해 적절히 업무를 분배한다. Front Controller # Front Controller(프론트 컨트롤러)는 Spring MVC 의 중심 컴포넌트이다.
Spring MVC 에서 &amp;lsquo;Dispatcher Servlet&amp;rsquo; 는 Front Controller 패턴을 구현한 것이다.</description>
    </item>
    
  </channel>
</rss>
