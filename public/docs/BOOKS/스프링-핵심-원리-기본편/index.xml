<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>스프링 핵심 원리 (기본편) on thisandthat</title>
    <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/</link>
    <description>Recent content in 스프링 핵심 원리 (기본편) on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>@ComponentScan</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/@ComponentScan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/@ComponentScan/</guid>
      <description>@Component 어노테이션이 달린 클래스들을 모두 찾아, 빈으로 등록 # @Component @Controlloer (@Component 갖고 있음) : Spring MVC 컨트롤러로 인식 @Service (@Component 갖고 있음) : 특별한 기능 X 비즈니스 로직 인식 용도 @Repository (@Component 갖고 있음) : 데이터(DB) 계층의 에러를 스프링의 (통일된)예외로 변환 여러 DB마다 에러가 다를 수 있다 -&amp;gt; 통일화 @Configuration (@Component 갖고 있음) : 스프링 설정 정보로 인식 * 어노테이션의 어노테이션을 인식 =&amp;gt; Java의 기능 X, Spring 의 기능 O</description>
    </item>
    
    <item>
      <title>@Configuration과 바이트코드 조작의 마법</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/@Configuration%EA%B3%BC-%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%A1%B0%EC%9E%91%EC%9D%98-%EB%A7%88%EB%B2%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/@Configuration%EA%B3%BC-%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%A1%B0%EC%9E%91%EC%9D%98-%EB%A7%88%EB%B2%95/</guid>
      <description> @Configuration, @Bean 을 통해 Bean 을 등록할 수 있다. # CGLIB 이 나의 클래스를 상속한 Proxy 클래스(객체)를 생성하고, 이 클래스(객체)를 Bean 으로 등록 # if(클래스(객체) 이미 존제?) { return 객체 반환 } else { obj = new 클래스(); obj -&amp;gt; bean 으로 저장; return obj } @Configuration 없이 @Bean 만 사용해도 Bean 으로 등록된다. # 단, 이때는 CGLIB 이 Proxy 객체로 만들어주지 않느다. = Proxy 객체를 생성 X = 싱글톤을 보장 X </description>
    </item>
    
    <item>
      <title>빈 생명 주기</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/%EB%B9%88-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/%EB%B9%88-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0/</guid>
      <description>스프링 Bean 은 다음과 같은 라이프사이클
(Bean) 객체 생성 의존관계 주입 스프링 컨테이너 생성 (ApplicationContext) 스프링 Bean 생성/등록 의존관계 주입 (DI) 초기화 콜백 : 빈 생성 / DI 이후 호출 사용 (개발자 코드 동작) 소멸(전) 콜백 : 빈 소멸 전 호출 스프링(스프링 컨테이너) 종료 생성자에서 하면 되는 것을, 왜(굳이) 초기화 콜백 사용??
-&amp;gt; (권장!!) 객체의 생성 / 초기화 분리한다.
책임 / 역할 분리 생성자 : 필수 정보 / 메모리 할당 등 &amp;lsquo;생성&amp;rsquo; 에 중점을 둔다.</description>
    </item>
    
    <item>
      <title>빈 스코프</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/%EB%B9%88-%EC%8A%A4%EC%BD%94%ED%94%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/%EB%B9%88-%EC%8A%A4%EC%BD%94%ED%94%84/</guid>
      <description>빈 스코프 : 빈이 존재할 수 있는 범위 # 기본 값 : singleton (애플리케이션 시작 ~ 종료)
즉, 스프링 컨테이너의 시작과 끝 (동일한 범위를 갖는다.)
스코프 종류 # singleton, prototype, request 는 기억하고 넘어갈 것
singleton prototype 빈 생성 / 의존관계 / 초기화하여 반환하고 끝 (관리 X) 매우 짧은 범위의 스코프 request (웹 관련 scope) 웹 요청이 들어오고 나갈 때 까지의 스코프 session (웹 관련 scope) 웹 세션 생성 ~ 종료 스코프 application (웹 관련 scope) 웹 서플릿 컨텍스트와 같은 범위 웹스코프 (라이브러리 필요 : spring-boot-starter-web)</description>
    </item>
    
    <item>
      <title>의존관계 주입</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85/</guid>
      <description>주입 방법 # 생성자 주입 # final OK (누락 X) 변경 가능성 X 최초 1번 실행 보장 생성자 1개 =&amp;gt; @Autowired 생략 가능 여러 개, 생략 불가능 세터 주입 # 생성자 이후에 처리 (= final X)
단점
Setter Open 변경 가능성 final X 선택적 (null OK) 필드 주입 # 생성자 이후에 처리 (= final X)
DI Framework 에 의존 테스트할 때, 주입해줄 수 없음. Setter 열어줘야함. final X 선택적 (null OK) * 단, 일부 테스트 코드에서는 OK 일반 메서드 주입 # 생성자 이후에 처리 (= final X)</description>
    </item>
    
  </channel>
</rss>
