<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>모던 자바 인 액션 on thisandthat</title>
    <link>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/</link>
    <description>Recent content in 모던 자바 인 액션 on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1장. 자바 8,9,10,11 무슨 일이 일어나고 있는가?</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/1%EC%9E%A5-%EC%9E%90%EB%B0%94-891011-%EB%AC%B4%EC%8A%A8-%EC%9D%BC%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EA%B0%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/1%EC%9E%A5-%EC%9E%90%EB%B0%94-891011-%EB%AC%B4%EC%8A%A8-%EC%9D%BC%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EA%B0%80/</guid>
      <description>자바 8,9,10,11 무슨 일이 일어나고 있는가? # 자바 역사를 통틀어 자바 8에서 가장 큰 변화가 일어났다.
자바 8에서 제공하는 새로운 기술은 다음과 같다.
스트림 API 메서드에 코드를 전달하는 것 (함수형 프로그래밍(?)) 인터페이스 Default 메서드 에러를 자주 일으키고 멀티코어 CPU를 이용하는 것보다 훨씬 비용이 비싼 synchrosized 키워드 대신에 Stream API 을 사용할 수 있다.
또, Stream API 덕분에 메서드에 코드를 전달하는 것, 인터페이스의 Default 메서드 가 자연스럽게 탄생하게 되었다. (?)</description>
    </item>
    
    <item>
      <title>2장. 동작 파라미터화 코드 전달하기</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/2%EC%9E%A5-%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%ED%99%94-%EC%BD%94%EB%93%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/2%EC%9E%A5-%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%ED%99%94-%EC%BD%94%EB%93%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0/</guid>
      <description>동작 파라미터화 코드 전달하기 # 쉽게 말하면 메서드를 파라미터로 전달하는 것이다.
동작 파라미터화란? 아직은 어떻게 실행할 것인지 결정하지 않은 코드블록이다. 코드블록은 나중에 프로그램에서 호출한다. 즉, 코드블록의 실행은 나중이다.
예시코드 # 첫 번째 시도 # public static List&amp;lt;Apple&amp;gt; filterApple(List&amp;lt;Apple&amp;gt; apples) { List&amp;lt;Apple&amp;gt; result = new ArrayList&amp;lt;&amp;gt;(); for(Apple apple : apples) { if(GREEN.equals(apple.getColor())) { result.add(apple); } } return result; } 여기서 조건(GREEN)이 변경(RED)되거나 추가(Weight)된다면 해당 메서드를 사용할 수 없다. (새로운 메서드를 생성할 것이다.</description>
    </item>
    
    <item>
      <title>3장. 람다표현식</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/3%EC%9E%A5-%EB%9E%8C%EB%8B%A4%ED%91%9C%ED%98%84%EC%8B%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/3%EC%9E%A5-%EB%9E%8C%EB%8B%A4%ED%91%9C%ED%98%84%EC%8B%9D/</guid>
      <description>람다 표현식 # 람다? # 람다 표현식(이하 람다)는 메서드로 전달할 수 있는 익명함수를 단순화 한 것이다.
람다 표현식(lambda expression)이란 간단히 말해 메소드를 하나의 식으로 표현한 것입니다.
람다는 {parameters} {-&amp;gt;} {body} 의 형태로 작성된다.
(Apple a1, Apple a2) -&amp;gt; a1.getWeight().compareTo(a2.getWeight()); 자바 8에서 지원하는 5 가지 람다 표현식의 예제 # 1. (String s) -&amp;gt; s.length() 2. (Apple a) -&amp;gt; a.getWeight() &amp;gt; 150 3. (int x, int y) -&amp;gt; { System.out.println(x, y); } 4.</description>
    </item>
    
    <item>
      <title>4장. 스트림 소개</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/4%EC%9E%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%86%8C%EA%B0%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94-%EC%9D%B8-%EC%95%A1%EC%85%98/4%EC%9E%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%86%8C%EA%B0%9C/</guid>
      <description>Stream 이란, &amp;lsquo;데이터 처리 연산을 지원하도록, source 에서 추출된 연속된 요소(sequence of elements)&amp;rsquo; 라고 한다.
연속된 요소
컬렉션과 마찬가지로 (특정 요소 형식으로 이루어진) 연속된 값 집합의 인터페이스를 제공한다.
컬렉션은 자료구조(data structure)이므로, 시간/공간 복잡도에 대한 고려, 저장, 접근 연산이 주를 이룬다.
반면, 스트림은 filter, sorted, map 과 같은 표현식(표현 계산식)이 주를 이룬다.
즉, 컬렉션의 주제는 데이터(data)이고 스트림의 주제는 계산(operation, calculation)이다.
소스(Source)
스트림은 컬렉션, 배열, I/O 자원 등의 &amp;lsquo;데이터 소스&amp;rsquo;로부터 데이터를 소비한다.</description>
    </item>
    
  </channel>
</rss>
