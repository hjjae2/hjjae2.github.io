<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>아파치 카프카 for beginners on thisandthat</title>
    <link>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/</link>
    <description>Recent content in 아파치 카프카 for beginners on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Broker, Replication, ISR</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/Broker-Replication-ISR/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/Broker-Replication-ISR/</guid>
      <description>Kafka Broker : 카프카가 설치된 서버의 단위를 의미
보통 브로커 3대 유지하기를 권장한다고 함 partition -&amp;gt; replication 의 수 만큼 복제 (단, 브로커 개수에 제한된다.)
Leader partition (DB의 master 개념) producer의 데이터를 전달받는 주체 Follower parition (DB의 slave 개념) Leader partition(브로커) 죽었을 때 -&amp;gt; follower partition 이 Leader 가 되어 가용성 보장 ISR = Leader + Follower partition e.g. replciation 3 이라면, Leader partition 1, Follower partition 2 개 존재한다.</description>
    </item>
    
    <item>
      <title>컨슈머 랙(Consumer Lag)</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/%EC%BB%A8%EC%8A%88%EB%A8%B8-%EB%9E%99Consumer-Lag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/%EC%BB%A8%EC%8A%88%EB%A8%B8-%EB%9E%99Consumer-Lag/</guid>
      <description>파티션에 데이터가 들어갈 때 offset 이라는 숫자가 붙게 된다. (0 부터 시작한다.)
컨슈머의 상태를 추측할 수 있음 (모니터링 지표)
각 파티션의 offset 기준으로, 컨슈머의 상태를 확인할 수 있도록 함 lag은 프로듀서 생산 속도(offset), 컨슈머 소비 속도(offset)의 차이를 기반으로 함
lag은 여러개가 될 수 있음 (파티션별로) records-lag-max : lag 값 중 가장 큰 값 컨슈머가 느리거나, 정상적으로 동작하지 않으면 lag 이 필연적으로 발생한다고 한다.
모니터링 애플리케이션, 카프카 버로우(Burrow) # 컨슈머 쪽에서 ELK, Grafana 쪽으로 데이터를 보내 확인할 수도 있으나, 컨슈머에 의존하게 되는 문제가 있다.</description>
    </item>
    
    <item>
      <title>토픽</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/%ED%86%A0%ED%94%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/%ED%86%A0%ED%94%BD/</guid>
      <description> TOPIC # (DB)Table, (FileSystem)Directory 와 비슷한 개념
&amp;lsquo;이름&amp;rsquo; 무슨 데이터를 갖는지 명확하게 네이밍 &amp;lsquo;파티션&amp;rsquo; consumer 가 partition 데이터를 읽어도 바로 삭제되지 않음 (중요) 데이터를 2번(혹은 여러 번) 소비해야할 때 유용, 중요한 특징 늘리는 것 가능 / 줄이는 것 불가능 파티션을 늘리고 컨슈머를 늘려 -&amp;gt; 데이터 처리를 분산 파티션 데이터 삭제 방식 일정 &amp;lsquo;시간&amp;rsquo; 이후 삭제 일정 &amp;lsquo;용량&amp;rsquo; 이후 삭제 </description>
    </item>
    
    <item>
      <title>파티셔너</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%84%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EC%95%84%ED%8C%8C%EC%B9%98-%EC%B9%B4%ED%94%84%EC%B9%B4-for-beginners/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%84%88/</guid>
      <description>프로듀서가 데이터를 보냄 -&amp;gt; 파티셔너가 이를 처리
어떤 파티션에 데이터를 저장할 지 결정 파티셔너 따로 설정하지 않는다면, UniformStickyPartioner 로 설정 (이 방식은 아래와 같이 동작)
메시지 키가 있는 데이터에 대해서는 해쉬 값을 생성하여 파티션을 결정 동일한 메시지 키(해쉬 값)은 동일한 파티션에 들어감 메시지 키가 없는 레코드는 Round-Robin 다만 전통적인 RR 과 조금 다르다. Batch 단위로 동작한다(?) 사용자 지정 파티셔너도 사용 가능
CustomPartitional 인터페이스를 제공한다고 함 예시 # 파티셔너, 파티션 결정이 중요한 이유는 아래와 같은 예시로 사용 가능</description>
    </item>
    
  </channel>
</rss>
