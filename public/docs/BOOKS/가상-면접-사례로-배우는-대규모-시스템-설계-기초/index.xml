<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 on thisandthat</title>
    <link>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/</link>
    <description>Recent content in 가상 면접 사례로 배우는 대규모 시스템 설계 기초 on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. 사용자 수에 따른 규모 확장성</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/01_%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/01_%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/</guid>
      <description>어떤 데이터베이스를 사용할 것인가? # 아래의 경우 NoSQL(비-관계형 데이터베이스)가 바람직한 선택이 될 수 있습니다.
아주 낮은 응답 지연시간(latency) 요구 데이터 비정형 데이터 직렬화, 역직렬화를 할 수 있기만 하면 됨 아주 많은 양의 데이터를 저장 수직적 규모 확장 vs 수평적 규모 확장 # 수직적 규모 확장에는 다음과 같은 단점이 있습니다.
SPOF, 서버 장애 시 모든 서비스 중단/장애 Scale-Up에 한계가 있음 CPU, Memory 를 무한으로 늘릴 수 없음 [다중화] (웹 계층)웹 서버의 다중화를 위해 선택할 수 있는 것?</description>
    </item>
    
    <item>
      <title>02. 개략적인 규모 추정</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/02_%EA%B0%9C%EB%9E%B5%EC%A0%81%EC%9D%B8-%EA%B7%9C%EB%AA%A8-%EC%B6%94%EC%A0%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/02_%EA%B0%9C%EB%9E%B5%EC%A0%81%EC%9D%B8-%EA%B7%9C%EB%AA%A8-%EC%B6%94%EC%A0%95/</guid>
      <description>2장 개략적인 규모 추정 # 구글의 시니어 펠로(senior fellow) 제프 딘(Jeff Dean)에 따르면, &amp;ldquo;개략적인 규모 추정&amp;quot;은 보편적으로 통용되는 성능 수치상에서 사고 실험을 행하여 추정치를 계산하는 행위로서, 어떤 설계가 요구사항에 부합할 것인지 보기 위한 것이다.
개략적 규모 추정을 효과적으로 해내려면 규모 확장성을 표현하는 데 필요한 기본기에 능숙해야 한다.
특히 2의 제곱수, latency(응답 지연), throughput(처리량, 처리율), 가용성과 관련된 수치들을 잘 이해하고 사용할 수 있어야 한다.
2의 제곱수 # 2^n 근사치 단위 2^10 1,000 (1천) KB 2^20 1,000,000 (1백만) MB 2^30 1,000,000,000 (10억) GB 2^40 1,000,000,000,000 (1조) TB 2^50 1,000,000,000,000,000 (1,000조) PB Latency (모든 프로그래머가 알야아 하는 응답 지연 값) # 구글의 제프 딘은 2010년에 통상적인 (컴퓨터에서 구현된 연산들의) 응답 지연 값을 공개한 바 있다.</description>
    </item>
    
    <item>
      <title>03. Key-Value Store 설계</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/06_Key-Value-Store-%EC%84%A4%EA%B3%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/06_Key-Value-Store-%EC%84%A4%EA%B3%84/</guid>
      <description>Key-Value Store # 대표적인 예시 : amazon dynamodb, memcached, redis, &amp;hellip;
Key 는 유일해야 한다.
Key 는 짧을수록 성능 상 유리하다. Value 는 Key를 통해서만 접근할 수 있다. Value 는 다양한 자료구조(문자열, 리스트, 객체)일 수 있다.
완벽한 설계란 없다. READ(일기), WRITE(쓰기), MEMORY USAGE(메모리 사용량) 사이에 균형(balance)을 찾고 데이터의 일관성, 가용성 사이에서 타협적 결정을 내려야 한다.
단일 서버 Key-Value Store # 한 대의 서버만 사용하는 Key-Value Store를 설계하는 것은 쉽다. 가장 직관적으로 (인메모리)해시 테이블에 저장하면 된다.</description>
    </item>
    
    <item>
      <title>10. 알림 시스템 설계</title>
      <link>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/10_%EC%95%8C%EB%A6%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/BOOKS/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/10_%EC%95%8C%EB%A6%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84/</guid>
      <description>개요 # 앱(iOS, Android) 알림, SMS, Email 알림을 보내야 한다.
iOS 푸시 알림 # iOS에서 Push Notification(푸시 알림)을 보내기 위해서 3가지 컴포넌트가 필요하다.
알림 제공자(Provider), APNS, iOS 단말기(Device)
컴포넌트 설명 알림 제공자 (Provider) 알림 요청을 APNS에 요청하는 주체이다. 알림 요청을 생성하기 위해 단말 토큰(device token), 내용(payload) 가 필요하다고 한다. APNS (Apple Push Notification Service) 애플이 제공하는 원격 서비스이다. 푸시 알림을 iOS 단말기로 보내는 역할을 담당한다. iOS 단말기 사용자가 사용하는 단말기(장치)이다.</description>
    </item>
    
  </channel>
</rss>
