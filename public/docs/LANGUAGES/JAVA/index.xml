<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on thisandthat</title>
    <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/</link>
    <description>Recent content in JAVA on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/LANGUAGES/JAVA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Acquire-a-Lock-by-a-Key-in-Java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Acquire-a-Lock-by-a-Key-in-Java/</guid>
      <description>https://www.baeldung.com/java-acquire-lock-by-key
1. Simple Mutex Lock Example # public class MyLockClass { private static Set&amp;lt;String&amp;gt; usedKeys = ConcurrentHashMap.newKeySet(); public boolean tryLock(String key) { return usedKeys.add(key) } public void unlock(String key) { usedKeys.remove(key); } } String key = &amp;#34;key&amp;#34;; MyLockClass lock = new MyLockClass(); try { lock.tryLock(key); // 처리해야 할 코드 } catch(Exception e) { } finally { lock.unlock(key); } 2. Simple Mutex Lock Example V2 (not refuse, wait until release the lock) # The application flow will be:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Callable-vs-Runnable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Callable-vs-Runnable/</guid>
      <description>Callable, Runnable 에 대해서 이해해보기
Java는 Multi-Threading 이라는 기술(기능)을 제공한다.
Runnable, Callable 인터페이스를 통해 Multi-Threading 기능을 설계할 수 있다.
Runnable : Multi-Threading 을 위해 제공되는 interface 이다. Callable : Runnable의 개선된 버전이다. (자바 5에서 추가) 두 인터페이스 모두 Multi-Threading 을 위한 것이다.
특징 Runnable Callable RETURN 리턴 타입 X 리턴 타입 O EXCEPTION Exception 발생 X Exception 발생 O 비고 Multi-Threading 을 위해 제공되는 interface 이다.
Thread, ExecutorService 클래스 등을 통해 사용될 수 있다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Future/</guid>
      <description>Future # (미래에) 결국에는 반환받을 결과를 표현하기 위해 사용되는 인터페이스이다.
&amp;quot; The Future interface is an interface that represents a result that will eventually be returned in the future. &amp;ldquo;
package java.util.concurrent; public interface Future&amp;lt;V&amp;gt; { boolean cancel(boolean var1); boolean isCancelled(); boolean isDone(); V get() throws InterruptedException, ExecutionException; V get(long var1, TimeUnit var3) throws InterruptedException, ExecutionException, TimeoutException; } 메서드 설명 get() 결과를 가져온다. 결과가 아직 반환되지 않았다면, 기다린다. 결과를 받기 전에 get() 호출하여 기다리게 된다면, 결과를 받을 때까지 &amp;lsquo;block&amp;rsquo; 한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Garbage-Collection-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Garbage-Collection-%EA%B8%B0%EB%B3%B8/</guid>
      <description>Garbage Collection # 사용 중이지 않은 객체(= Garbage)를 식별하여 정리(= 메모리 해제)
종류 # Serial GC Parallel GC &amp;hellip; CMS(Concurrent Mark Sweep) GC G1GC ZGC Mark &amp;amp; Sweep # Mark # 사용되는 메모리(객체)와 사용되지 않는 메모리(객체)를 식별하는 작업 (= reachability 를 판별하는 작업)
root set(객체에 대한 최초의 참조) 가 될 수 있는 요소
Java Stack (지역변수, 파라미터 등) Java Native Interface(= Native Stack) JNI에 의해 생성된 객체들이 있을 때 Method(Staic) Area (정적 변수) root set으로부터 시작해서 참조로 연결되어 있는 모든 객체들을 탐색한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Garbage-Collection-%EC%A2%85%EB%A5%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Garbage-Collection-%EC%A2%85%EB%A5%98/</guid>
      <description>Garbage Collection 종류 # Serial GC (-XX:+UseSerialGC) # Marking → Sweeping → Compaction 싱글 코어(쓰레드)를 위한 GC 절대 사용하지 않는 것을 권장 Parallel GC (Throughput GC) (-XX:+UseParallelGC) # Serial GC 알고리즘 동일 Serial GC 알고리즘 + 멀티 쓰레드 메모리가 충분, 코어 수가 많을 때 유리 Parallel Old GC (-XX:+UseParallelOldGC) # Marking → Summary → Compaction Parallel GC와 비교하여 Old 영역의 GC 알고리즘만 다르다. Summray 단게는 앞서 GC를 수행한 영역에 대해서 별도로 살아있는 객체를 식별한다?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Interface-default-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Interface-default-method/</guid>
      <description>Java 8 부터 Interface 에서 default method 를 구현할 수 있게 되었다.
추상 클래스와의 차이점 ?? # 용도/목적이 다르다.
abstract class 는 말 그대로 &amp;lsquo;클래스&amp;rsquo; 이다. extends 하는 것이다. 멤버변수, 접근제어 등의 기능을 갖는다. interface 는 말그대로 &amp;lsquo;인터페이스&amp;rsquo;이다. implements 하는 것이다. 인터페이스 다중 구현에서 Default 메서드가 중복일 때 # A 라는 클래스가 Interface1, Interface2 를 다중 구현하고 있는데, Interface1, Interface2 가 동일한 이름의 default 메소드를 갖고있다면 어떻게 될까.
결론 : (컴파일)에러가 난다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Java-ClassPath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Java-ClassPath/</guid>
      <description> classpath 에 대해 정리해보기
CLASSPATH # (Windows의 시스템 환경 변수 처럼) Java 실행 시 클래스 파일들(.class)의 위치/경로 classpath에 실행하고자 하는 패키지(클래스)의 루트를 등록 예시 # /home/user/me/com/example/Test.class 를 실행하고자 할 때, 이 클래스가 위치한 경로로 찾아가지 않고 (java Teset 명령어를 통해)아무곳에서나 사용하고 싶다.
&amp;gt; vim .zshrc CLASSPATH=&amp;#34;/home/user/me/com/example&amp;#34; &amp;gt; java Test Hello, World! </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Java-Stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Java-Stream/</guid>
      <description>Stream 에 대해 정리해보기
Stream # Java8 에서 java.util.stream 패키지에 Stream API 추가
다양한 데이터 소스(source)를 표준화된 방법으로 다루기 위한 기술
Stream API 의 특징은 다음과 같다. # 데이터(컬렉션, 배열 등)을 표준화된/하나의 방법을 통해 연산, 조작할 수 있다.
데이터를 스트림으로 만들고 나면 표준화된(하나의) 방법으로 조작할 수 있다. 내부 반복(internal interation) 을 통해 작업을 수행한다.
스트림은 일회용이다.
최종 연산(소모)을 통해 스트림이 끝났다면, 다시 스트림 생성/조작해야 한다. 원본 데이터(original data)를 변경하지 않는다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Java-String-Pool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Java-String-Pool/</guid>
      <description>String Pool 에 대해 이해해보기
Java에서 String 객체를 생성하는 2가지 방법 # new 연산자 String str = new String(&amp;quot;안녕하세요&amp;quot;); String Literal String str = &amp;quot;안녕하세요&amp;quot; 두 방식 모두 Heap 에 생성되지만, 차이점도 존재한다고 한다.
new 연산자 # (값이 같아도, 달라도) 서로 다른 주소(reference value)를 가진다. 즉, 계속해서 새롭게 생성한다. String str1 = new String(&amp;#34;안녕하세요&amp;#34;); // Heap 영역에 &amp;#34;안녕하세요&amp;#34; 라는 객체가 새롭게 저장된다. String str2 = new String(&amp;#34;안녕하세요&amp;#34;); // Heap 영역에 &amp;#34;안녕하세요&amp;#34; 라는 객체가 새롭게 저장된다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-JVM-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81%EC%9A%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-JVM-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81%EC%9A%A9/</guid>
      <description>JVM 에 신뢰할 수 있는 인증서 추가하기
개요 # &amp;lsquo;사내(사설) SSL을 사용하는 이유&amp;rsquo; 글에서 잠깐 적었는데, (로컬 환경)개발을 하면서 이 사내 인증서 때문에 통신 문제가 발생했다.
원인 # 테스트하고자 하는 작업의 흐름은 간단하게 다음과 같다.
Exception 이 터진다. Exception 에 대한 내용을 (사설 인증서가 적용된)Sentry 쪽으로 보낸다. Sentry 에 내용이 쌓이고, 사용자(개발자)에게 알림을 보내준다. 위의 2번의 과정에서 오류가 발생했고, 내가 이해한 원인은 다음과 같다.
(외부에서 받아온)JVM 은 당연히도 사내에서 사용하고 있는 사설 인증서 정보를 가지고 있지 않다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/Java-JVM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/Java-JVM/</guid>
      <description>JVM # 자바 가상 머신(Java Virtual Machine)이다. (스택 기반의 가상 머신이다.)
* 여기서 가상 머신이란? 프로그램을 실행하기 위해 물리적인 기계(머신)와 유사한 (논리적인? 가상의?) 머신을 소프트웨어로 구현한 것이다.
Java Application 을 클래스 로더를 통해 읽어 들이고, Java API 와 함께 실행한다.
Java 와 OS 사이에서 중개 역할을 한다. Java 가 OS 에 구애받지 않고 사용할 수 있는 환경을 제공한다.
이 외 메모리 관리, GC 을 수행한다.
자바 프로그램의 실행 과정 # 프로그램이 실행되면 JVM 이 OS 로부터 메모리를 할당 받는다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Lock/</guid>
      <description>https://www.baeldung.com/java-concurrent-locks</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Map/</guid>
      <description>Map # 흔히 사용되는 구현체
HashMap LinkedHashMap HashTable ConcurrentHashMap TreeMap HashMap # // jdk 11 기준 public class HashMap&amp;lt;K, V&amp;gt; extends AbstractMap&amp;lt;K, V&amp;gt; implements Map&amp;lt;K, V&amp;gt;, Cloneable, Serializable { private static final long serialVersionUID = 362498820763181265L; static final int DEFAULT_INITIAL_CAPACITY = 16; // &amp;lt;-- 초기 사이즈 ... final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { HashMap.Node[] tab; int n; if ((tab = this.table) == null || (n = tab.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-MDC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-MDC/</guid>
      <description>다음 내용을 참고하자.
https://mangkyu.tistory.com/266 https://bcho.tistory.com/1316 https://logback.qos.ch/manual/mdc.html 출처: https://bcho.tistory.com/1316
요약하면, (ThreadLocal 기반으로 동작하며) CorrelationID + 메타 데이터를 Map 형태로 관리할 수 있다.
관리되는 메타 데이터들을 로깅 시 함께 남겨 애플리케이션 로그 추적을 쉽게 한다. (%X{placeholder} 패턴으로 남길 수 있다.)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Multi-Threading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Multi-Threading/</guid>
      <description>HW 관점에서의 Thread # CPU, Core, Thread
core : (CPU 내의) 물리적인 코어 thread : 논리적인 코어 &amp;ldquo;동시에 실행가능한 스레드 개수&amp;rdquo; 예시
CPU 2개 4코어 8스레드 -&amp;gt; 8개의 작업을 동시에 처리할 수 있음 SW(Java) 관점에서의 Thread # 이전부터 (HW 관점에서의)1코어 1스레드 환경에서, Java 는 n 개의 스레드를 사용할 수 있었음 -&amp;gt; &amp;lsquo;동시성&amp;rsquo;과 관련
&amp;lsquo;동시성&amp;rsquo; : 여러 개의 작업들이 짧은 시간 내에 번갈아 처리됨 -&amp;gt; 동시에 처리되는 것처럼 보여짐 컨텍스트스위칭 발생 &amp;lsquo;병렬성&amp;rsquo; : 작업들이 병렬적으로 처리되는 것 Java Thread 는 &amp;lsquo;동시성&amp;rsquo;을 가지는 것</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Netty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Netty/</guid>
      <description>Channel # &amp;quot; A nexus to a network socket or a component which is capable of I/O operations such as read, write, connect, and bind. &amp;ldquo;
I/O(read, write, connect, bind) 작업을 할 수 있는 네트워크 소켓, 컴포넌트와의 연결점이다.
다음 기능을 제공한다.
channel 의 현재 상태 channel 의 구성 파라미터 (configuration parameters) channel 이 지원하는 I/O 작업 (read, write, connect, bind) channel 과 관련된 모든 I/O 이벤트, requests 를 핸들링하는 ChannelPipeline 모든 I/O 작업은 비동기이다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Open-JDK/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Open-JDK/</guid>
      <description>OpenJDK 공식 사이트
&amp;ldquo;썬 마이크로시스템즈는 라이선스에 문제가 있는 몇몇 모듈을 제외하고 openjdk.org에 JDK 코드 제공하였다. 이 코드는 공개되었다.&amp;rdquo;
OpenJDK 에는 여러 배급처(Vendor)가 존재한다.
JCP(Java Community Process) 를 통해 JSR(Java Specification Request) 표준이 정의된다.
JSR 내용을 기반으로 각 배급처(Vendor)가 구현한다.
TCK(Technology Compatibility Kit) 를 이용해, JSR 표준에 잘 맞춰져 개발이 되었는지 검증/테스트 한다.
OpenJDK 종류 # Community / Vendor Product name OSS / Commercial Architecture Description Oracle Oracle JDK Commercial Hotspot - OpenJDK.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Optional-orElse-vs-orElseGet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Optional-orElse-vs-orElseGet/</guid>
      <description>orElse(T other) vs orElseGet(Supplier&amp;lt;? extends T&amp;gt; other) # 간단 요약 # orElse() : Optional null 여부에 상관없이 메서드를 호출하여 (메서드의) 값을 반환한다.
orElseGet() : Optional null 인 경우에만 메스드를 호출(supplier.get() 호출)하여 (메서드의) 값을 반환한다.
메서드의 인자를 보면 명확한 차이점이 있다. (Supplier의 Lazy Evaluation) (T other) vs (Supplier&amp;lt;? extends T&amp;gt; other)
/** * Return the value if present, otherwise return {@code other}. * * @param other the value to be returned if there is no value present, may * be null * @return the value, if present, otherwise {@code other} */ public T orElse(T other) { return value !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Reflection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Reflection/</guid>
      <description>Reflection # 로드된 클래스의 정보를 찾을 수 있게 지원합니다.
구체적인 클래스(구현 클래스, 구현체)의 타입을 몰라도 그 클래스의 정보(변수, 타입, Method)에 접근할 수 있게 해주는 API입니다.
//참조 클래스 구체적인 클래스 Object obj = new Car(); 동작 원리 # 동작원리는 다음과 같습니다.
JVM이 실행되면, 클래스로더에 의해 사용자가 작성한 클래스가 Method area(Class area, Static area)에 저장됩니다. Reflection API 는 이 정보를 활용합니다. 예시 # 아래는 Reflection API 를 사용한 예제입니다.
// Reflection API 예제 Object obj = new Car(); Class carClass = Car.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Stack/</guid>
      <description>Thread-safe
Vector 클래스 상속 push, size =&amp;gt; Vector 클래스의 메서드 사용 synchronized 키워드 사용 method level push() : (Vector) synchronized pop() : synchronized peek() : synchronized empty() : (Vector) synchronized search() : synchronized public class Stack&amp;lt;E&amp;gt; extends Vector&amp;lt;E&amp;gt; { ... public E push(E item) { addElement(item); // (Vector) synchronized return item; } // synchronized public synchronized E pop() { E obj; int len = size(); obj = peek(); removeElementAt(len - 1); return obj; } // synchronized public synchronized E peek() { int len = size(); if (len == 0) throw new EmptyStackException(); return elementAt(len - 1); } public boolean empty() { return size() == 0; // (Vector) synchronized } // synchronized public synchronized int search(Object o) { int i = lastIndexOf(o); // (Vector) synchronized if (i &amp;gt;= 0) { return size() - i; } return -1; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Static-method-Overriding-Hiding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Static-method-Overriding-Hiding/</guid>
      <description>Static method Overriding # JVM은 메서드를 호출할 때, 객체 메서드(instance method)의 경우 (런타임 시에) 해당 메서드를 구현하고 있는 실제 객체를 찾아 호출한다.
하지만 스태틱 메서드(static method)에 대해서는 실제 객체를 찾는 작업을 하지 않는다. 따라서 Static method의 경우 컴파일 시점에 선언된 타입의 메서드를 호출한다.
즉 Static method 에 대해서는 오버라이딩이 적용되지 않는다. 또, 이때에는 Overriding이 아닌 Hiding 이라고 부른다고 한다.
예시 코드 # public class A{ public static void test() { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/Java-String/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/Java-String/</guid>
      <description> contains() # public boolean contains(CharSequence s) { return this.indexOf(s.toString()) &amp;gt;= 0; } public static int indexOf(byte[] value, int valueCount, byte[] str, int strCount, int fromIndex) { byte first = str[0]; int max = valueCount - strCount; for(int i = fromIndex; i &amp;lt;= max; ++i) { if (value[i] != first) { do { ++i; } while(i &amp;lt;= max &amp;amp;&amp;amp; value[i] != first); } if (i &amp;lt;= max) { int j = i + 1; int end = j + strCount - 1; for(int k = 1; j &amp;lt; end &amp;amp;&amp;amp; value[j] == str[k]; ++k) { ++j; } if (j == end) { return i; } } } return -1; } 시작 인덱스부터 for-loop 탐색 시작 첫 글자 같다면, 검사 시작 중간에 틀리면 다시 2번부터 시작 같다면 시작 인덱스 반환 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Throwable-Error-Exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Throwable-Error-Exception/</guid>
      <description>Throwable # &amp;quot; The Throwable class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java throw statement. Similarly, only this class or one of its subclasses can be the argument type in a catch clause. For the purposes of compile-time checking of exceptions, Throwable and any subclass of Throwable that is not also a subclass of either RuntimeException or Error are regarded as checked exceptions.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Valve-Tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/LANGUAGES/JAVA/JAVA-Valve-Tomcat/</guid>
      <description>https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=gallechess&amp;logNo=221047184041</description>
    </item>
    
  </channel>
</rss>
