<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Community Day 2022 on thisandthat</title>
    <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/</link>
    <description>Recent content in AWS Community Day 2022 on thisandthat</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/Amazon-CloudFront%EC%99%80-AWS-Lambda@Edge%EB%A1%9C-SPA%EC%97%90%EC%84%9C-%EB%8F%99%EC%A0%81-SEO-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/Amazon-CloudFront%EC%99%80-AWS-Lambda@Edge%EB%A1%9C-SPA%EC%97%90%EC%84%9C-%EB%8F%99%EC%A0%81-SEO-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</guid>
      <description>OpenGraph # SPA 는 왜 링크마다 OpenGraph 적용이 안될까? # OpenGraph 스크랩 봇의 행동 강령 : JS는 버린다. (JS 를 읽는데에 시간이 많이 쓰이기 때문에)
이건 별도로 찾아보자. SPA 는 기본 뼈대가 아주 단순한 구조이다.
대처 방법은? # SSR, Static 웹으로 제공할 수 있다.
다만 위 방법도 단점은 있다. 동적으로 제공하기 힘들다.
코드 레벨이 아닌 인프라로 해결할 수 있을까? # 인프라로 해결할 수 있다. 웹 앱 앞에 프록시를 두고 메타 태그를 추가할 수 있다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/AWS-Lambda-Container%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/AWS-Lambda-Container%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81/</guid>
      <description>Introduction # Fargate Kinesis (Data Firehost, Stream) S3 SQS Lambda Step Functions 구조화된 Lambda workflow 를 구성하고 있다. Why Lambda Container? # Data 처리 &amp;amp; Lambda 사용에 있어서 용량 제한으로 인해 다양한 라이브러리 사용에 제한이 있었다. 라이브러리 용량이 조금만 커도 사용에 제한이 있었다.
기존 labmda 기반 아키텍처를 유지하면서 conatiner 기반으로 변경할 수 있어야 했다.
Lambda Container with Serverless Framework # 도커 이미지 필요하다. AWS 에서 제공하는 이미지를 사용하는게 제일 속 편하다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/AWS-Nitro-Enclave%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EA%B3%A0%EA%B0%9D-%EC%A0%95%EB%B3%B4-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/AWS-Nitro-Enclave%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EA%B3%A0%EA%B0%9D-%EC%A0%95%EB%B3%B4-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/AWS%EC%97%90%EC%84%9C-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0.-%EA%B7%B8%EB%A6%AC%EA%B3%A0-ROSA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/AWS%EC%97%90%EC%84%9C-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0.-%EA%B7%B8%EB%A6%AC%EA%B3%A0-ROSA/</guid>
      <description>PaaS # AWS Lightsail AWS Elastic Beanstalk serverless # 대표적으로 아래와 같은 서비스를 제공합니다.
AWS Lambda What is cold-start (issue)? AWS App Runner AWS Fargate orchestration # 대표적으로 아래와 같은 서비스를 제공합니다.
AWS ECS AWS EKS AWS ECS # EKS에 비해 단순함 을 강조한 서비스
AWS EKS # ECS 에 비해 조금 복잡하지만 유연성(확장성) 을 강조한 서비스
입문자 입장에서는 ECS를 사용하다가 EKS를 사용하는 것을 권장한다.
ROSA # RedHat + OpenShift + AWS</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/CDK-for-Terraform%EC%9C%BC%EB%A1%9C-%EB%82%98%EB%A7%8C%EC%9D%98-AWS-Resource-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/CDK-for-Terraform%EC%9C%BC%EB%A1%9C-%EB%82%98%EB%A7%8C%EC%9D%98-AWS-Resource-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0/</guid>
      <description>IaC의 장점 # Infrastructure 버전을 관리할 수 있다. Infrastructure 선언적으로 관리할 수 있다. Infrastructure 여러 벌(set) 배포할 수 있다. 각 리소스의 필수 요소들을 파악하기 쉽다. 리소스가 대체될 것이라는 warning 문구를 표시해주기도 하고, replace 할 것인지 확인 여부를 묻는 기능도 있다. (approval 하면 실제 배포되는 것) 예상치 못한 과금을 예방할 수 있다. 비즈니스 로직 작성에 집중할 수 있다. CDK for TF # AWS CDK 개발진이 Hashi Corp와 함께 개발한 IaC Kit Generally Available at 2022.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/%EA%B4%91%EA%B3%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A7%91%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B5%AC%EC%B6%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/%EA%B4%91%EA%B3%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A7%91%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B5%AC%EC%B6%95/</guid>
      <description>https://jybaek.tistory.com/
Agenda # 광고 도메인 설명 # 굉장히 많은 (수십 개의) 매체에서 데이터를 수집하고 있다.
광고주마다 성과측정의 기준이 되는 기여기간이 다르다. 각 매체가 관리하는 광고 지면들로부터 뒤늦게 데이터가 집계되는 경우도 있다. (예를 들어, 시간이 지나면서 클릭수가 막 변경된다.) 수집 : (다양한 매체의) 대용량 광고 데이터 수집 # ECS 서비스를 사용하고 있다.
왼쪽부터 1번 순서로 진행된다. RDS 에서 스케줄러가 데이터 읽고, 키 정보? 조회 하여 Cache에 보낸다. Cache 에 보내지면 Collector 가 일겅와?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-Karpenter%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Amazon-EKS-%ED%99%95%EC%9E%A5-%EC%9A%B4%EC%98%81-%EC%A0%84%EB%9E%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjjae2.github.io/docs/DEV/AWS-Community-Day-2022/%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-Karpenter%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Amazon-EKS-%ED%99%95%EC%9E%A5-%EC%9A%B4%EC%98%81-%EC%A0%84%EB%9E%B5/</guid>
      <description>Karpenter
오토스케일링 솔루션에 대한 고민 # 무신사는 ASG를 적극적으로 활용하고 있다.
(평소의)트래픽에 대한 예측이 (나름) 가능하다. 많이 들어오는 비슷하다. 트래픽 증가 폭이 완만하다. 평소에는 ASG 활용해서 CPU 사용률을 기반으로 점진적으로 스케일링 한다. 서비스 마다 CPU, 메모리 사용률이 제각각이기에 다양한 인스턴스 타입을 사용 중이다. 다만, 이벤트 기간에는 다르다.
사전에 미리 스케일 아웃 해둔다. 사전에 인지 못해도, 가능한 빨리 스케일 아웃될 수 있어야 한다. :zap: 따라서, 스케일 인/아웃 모두 빠르면서 서비스에 적합한 인스턴스를 비용-효율적으로 운영해야 한다.</description>
    </item>
    
  </channel>
</rss>
